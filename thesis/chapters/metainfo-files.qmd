# Metainfo Files {#sec-metainfo-files}

## What is a metainfo file? / What purpose does it serve

## Structure of a metainfo file

- v1 and v2 metainfo files exist. big difference in how files are stored
- metainfo files have some toplevel keys and then have an info dictionary with more keys within it

### v1 metainfo files

#### Top-level keys

#### Keys in the info dictionary

### v2 metainfo files

#### Top-level keys

#### Keys in the info dictionary

#### Merkle trees? what? why?

### Hybrid torrents

### The difference between v1 and v2 metainfo files / how to convert between them perhaps?

possibly switch the order of this section with the previous section

## examples

not sure if i want this section

## parsing

the actual parsing is pretty simple because i just use the bencode decoder described in @sec-bencode.

- talk about my attempts to parse/use hybrid torrents
- talk about how info hashes don't match up if there are any extra keys in the info dictionary
    - talk about the two approaches of 1) decoder and reencode (cite the spec recommending against this) vs 2) take substring of metainfo file
    - since we do (1) we need to make sure that we reencode all keys that we decoded, not just the keys that we expect
    - also any info dictionaries that aren't as compliant as the one we produce after reencoding means hashes don't match

## The info dictionary

### Info hashes

I'm not sure where I want to put this section and its parent, but I need to put them somewhere, because I keep referring back to them from other chapters, and I need to be very explicit about info hashes.

***

What follows is the WIP version of this chaper, in the old structure

> 0. conceptual metainfo file overview?
> 1. explain that the big difference is in how files are stored
> 2. explain v1
> 3. explain v2
> 4. synthesis chapter where we recount the differences
> 
> The BitTorrent process begins with the *metainfo file* (also known as the *torrent file* due to the customary `.torrent` file extension). The metainfo file is a small file that must be directly downloaded before starting the BitTorrent process and contains the necessary information to begin the BitTorrent process. There are significant differences between v1 and v2 metainfo files, but at a general level a metainfo file is a dictionary serialized via Bencode (described in detail in @sec-bencode).
> \todo{"must" is a little strong. should probably reword to "acquire via side channel". also note that extensions can change this}
> 
> ## Common characteristics
> 
> ### Top-level keys
> 
> All metainfo files (v1 and v2) have the following keys:
> 
> `announce`
> :   The URL of the tracker. Note that due to @bep0012 the value of this key is usually ignored, though it must still be present.
> 
> `info`
> :   The info dictionary, which in turn contains its own sub-keys. The distinction between keys at the top-level of the metainfo file and keys in the info dictionary is important because the serialized form of the info dictionary is used as an identifier for the torrent as a whole (see @sec-info-hash for more details). This allows for changing out the tracker URL without invalidating the entire torrent.
> 
> ### The info dictionary
> 
> The info dictionary must have the following keys in both v1 and v2 metainfo files:
> 
> `name`
> :   The display name of the torrent, which is usually used as the suggestion for where to save the downloaded file(s). Although it must be present, it is "purely advisory" [@bep0003; @bep0052] and could in theory be ignored by the torrent client.
> `name`
> :   The display name of the torrent, which is usually used as the suggestion for where to save the downloaded file(s). It must be present, although it is "purely advisory" [@bep0003; @bep0052] and could in theory be ignored by the torrent client.
> 
> `piece length`
> :   The size, in bytes, of each piece of the torrent. Unless the total length of the torrent is a perfect multiple of this value, the final piece will be shorter.
> 
> ## Keys only present in v1 metainfo files
> 
> ### Top-level keys
> 
> All keys that must exist at the top level of a v1 metainfo file must also exist in a v2 metainfo file.
> 
> ### Keys in the info dictionary
> 
> `pieces`
> :   The (SHA1) hashes of the pieces of the torrent, concatenated in order. Because each SHA1 hash is 20 bytes long, the length of this data must be 20 times the number of pieces bytes long.[^hashes]
> 
> [^hashes]: explain what hashes are and why we care.
> 
> `length` or `files`, but not both
> :   One and only one of these keys must be present (if neither or both keys are present, the metainfo file is invalid). Which key is present indicates whether the torrent described by this metainfo file will download a single file or a directory of files: if the `length` key is present, the torrent will download a single file, and the value of the key is the length (in bytes) of that file. If the `files` key is present, the torrent will download a directory of files, and the value of the key is as follows:
> 
>     The value associated with the `files` key is a list of dictionaries. Each dictionary in the list represents one file downloaded by the torrent, and contains two keys: `length`, which is the length of the given file (in bytes); and `path`, which is a list of strings that represent the path to the given file relative to the directory chosen for the torrent to be downloaded to.
> 
>     For example, if the `files` key has the value  
>     `ld6:lengthi1e4:pathl9:first.txteed6:lengthi5e4:pathl9:my_folder10:second.txteee`:
> 
>     ```bencode
>     l
>       d
>         6:length
>           i1e
>         4:path
>           l
>             9:first.txt
>           e
>       e
>       d
>         6:length
>           i5e
>         4:path
>           l
>             9:my_folder
>             10:second.txt
>           e
>       e
>     e
>     ```
> 
>     then it is describing two files. The first is 1 byte long and will be saved to `first.txt` inside the directory that the user chooses to save the torrent to. The second is 5 bytes long and will be saved to `second.txt` in a directory named `my_folder` inside the directory that the user chooses to save the torrent to.
> 
>     Be aware that the order of the files given under the `files` key does matter. This is because, for the purposes of splitting a torrent into pieces, BitTorrent pretends that a multi-file torrents is really a extremely long single-file torrent, and it does so by concatenating all the files listed under the `files` key *in the order they are listed*. This is the only time that the order of these files is relevant, though it must be kept in mind in various parts of the implementation.
> 
> ## Keys only present in v2 metainfo files
> 
> ### Top-level keys
> 
> `piece layers`
> :   The value of this key is a dictionary. For every file in the torrent larger than the piece length, there is one key-value mapping. The key is the root of the Merkle tree of that file (the `pieces root` key described below), while the value is a concatenation of hashes of the Merkle tree of that file, at the layer where each hash covers `piece length` bytes. See @sec-merkle-hashes for more information.
> 
> ### Keys in the info dictionary
> 
> `meta version`
> :   The version of the BitTorrent protocol that this metainfo file was designed to use. In v2 metainfo files, the value of this property is 2. While it would be ideal to have v1 metainfo files have a value of 1 for this property, we can't update the protocol specification without it being a new version, so we assume that no value implies 1 and all version from v2 on will have this key.
> 
> `file tree`
> :   The value of this key is a nested directory structure that, like the `files` key in a v1 metainfo file, describes the file(s) that make up the torrent. However, the structure is more complicated. Each non-empty dictionary key represents a path component[^unixpaths] of a file. When the entire path of a file has been described in terms of nested dictionaries, there is another nested dictionary with an empty key, which in turn maps to a dictionary containing `length` and `pieces root` keys. An example will make this structure easier to grasp:
> 
>     \todo{fix this overflow}
>     For example, if the `files` key has the value  
>     `d9:first.txtd0:d6:lengthi1e11:pieces root32:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaee9:my_folderd10:second.txtd0:d6:lengthi5e11:pieces root32:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbeeee`:
> 
>     ```bencode
>     d
>       9:first.txt
>         d
>           0:
>             d
>               6:length
>                 i1e
>               11:pieces root
>                 32:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
>             e
>         e
>       9:my_folder
>         d
>           10:second.txt
>             d
>               0:
>                 d
>                   6:length
>                     i5e
>                   11:pieces root
>                     32:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
>                 e
>             e
>         e
>     e
>     ```
> 
>     then it is describing two files. The first is 1 byte long and will be saved to `first.txt` inside the directory that the user chooses to save the torrent to. The second is 5 bytes long and will be saved to `second.txt` in a directory named `my_folder` inside the directory that the user chooses to save the torrent to. (I have deliberately chosen to use the same file structure as the previous example.)
> 
>     In the final level of nested dictionaries, the `length` key describes the length in bytes of the given file. The `pieces root` key is the root hash of a Merkle tree constructed from the parts of the file. See @sec-merkle-hashes for more information.
> 
> [^unixpaths]: Here we'd need to have an explanation of how file paths work.
> 
> ### Merkle trees? What? Why? {#sec-merkle-hashes}
> 
> At this point you may be confused. What is a Merkle tree? Why are we using them? What was wrong with storing the hash of each piece? Those are all good questions, and the answers may not be immediately clear (they definitely were not immediately clear to me).
> 
> #### What is a Merkle tree?
> 
> A Merkle tree is a tree of hashes
> 
> diagram here
> 
> #### Why?
> 
> reduces the amount of data in the info dict - does this matter, since we hash for ID anyway?
> 
> ## Hybrid torrents
> 
> @bep0052 also introduces the notion of a *hybrid torrent*, which can be understood both by programs that can only read v1 metainfo files and by programs that can only read v2 metainfo files. 
