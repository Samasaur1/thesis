# Peer Wire Protocol {#sec-peer-wire-protocol}

Once a connection has been established between peers, the peer wire protocol begins. This protocol allows two connected peers to share pieces of the torrent, as well as (with some extensions that I did not implement) discovering new peers, fetching metadata about other torrents, and more. 

1. The handshake

To begin a peer wire connection, both peers must send a *handshake*. This is a specific sequence of bytes that assure each peer that the other is using the same protocol, so that they can be confident that the messages they send will not be misinterpreted. The BitTorrent peer wire protocol handshake looks like this:

```
00000000  13 42 69 74 54 6f 72 72  65 6e 74 20 50 72 6f 74  |.BitTorrent Prot|
00000010  6f 63 6f 6c 00 00 00 00  00 00 00 00 31 31 31 31  |ocol........1111|
00000020  31 31 31 31 31 31 31 31  31 31 31 31 31 31 31 31  |1111111111111111|
00000030  32 32 32 32 32 32 32 32  32 32 32 32 32 32 32 32  |2222222222222222|
00000040  32 32 32 32                                       |2222|
00000044
```

\todo{insert colored hexdump diagram here}

Let's break that down. The first byte is `0x13`, which corresponds to decimal 19. This specifies the length of the subsequent ASCII string representation of the protocol name in bytes, and indeed, if we read the next 19 bytes, they are the string `BitTorrent Protocol` in ASCII. This allows other protocols to exist between peers, since they will be differentiable by name.

Following the protocol name are eight extension bytes. In my implementation, as in the original specification, these are all `0x00`. Extensions to the peer wire protocol (described in further BEPs) can be assigned one of these 64 bits, and setting a given bit indicates that the corresponding extension is supported by the peer.

The next 20 bytes are the infohash of the torrent. When you're making an outgoing connection, this is simple, because you find peers by torrent, so you use that torrent's info hash^[that is, the process goes: 1) you ask the tracker "give me peers for torrent X"; 2) the tracker says "here's peer A"; 3) you connect to peer A and use the infohash for torrent X in the handshake]. However, it's a little more complicated for incoming connections. While you could technically open a new listening socket for each torrent you are downloading and send the corresponding port with each tracker request, most clients instead use a single listening socket for all torrents, wait for the incoming connection to send the infohash that they want, check whether we're actually participating in that torrent, and respond with the same infohash if so. Note that this makes it even more important to send the info hash first when making an outgoing connection.

After the infohash is the peer ID, which uniquely identifies a torrent client over the course of a download. There's a commonly used format for these peer IDs, though it isn't required.

\todo{explain common format}

1b. Verify handshake

Once both peers have sent and received the handshake, they must check that the values they received are what they expected, or else they must close the connection.

|     | Outgoing connections | Incoming connections |
| --- | --- | --- |
| Protocol | Must be `BitTorrent Protocol` | Must be `BitTorrent Protocol` |
| Extension bytes | No restriction | No restriction |
| Infohash | Send the infohash that they used to get the peer from the tracker, receive the same infohash back | Recieve an infohash that corresponds to a torrent they are downloading, send the same infohash back |
| Peer ID | Receive the peer ID they got from the tracker | No restriction |

2. Send bitfield (optional)

This is a compact way to tell the peer which pieces of the torrent you have. Under the original specification, this is only allowed at the beginning of a peer-to-peer connection, although some BEP allows it at any point.

\todo{find and cite which BEP}

## Storing and Stitching Pieces

By its inherent nature, a BitTorrent peer may get pieces of the file(s) that it is downloading out of order, and must take care to keep track of the order that they go in so that they can later be reconstructed. 
