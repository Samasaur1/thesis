# BitTorrent Extensions {#sec-extensions}

## Types of extensions

### Peer wire protocol extensions {#sec-extensions-peer-wire-protocol}

Recall from @sec-peer-wire-protocol-handshake that once two peers connect, the first thing that they do is perform a *handshake*. The handshake that I used looks like this:

```hexdump
00000000  13 42 69 74 54 6f 72 72  65 6e 74 20 70 72 6f 74  |.BitTorrent prot|
00000010  6f 63 6f 6c 00 00 00 00  00 00 00 00 68 68 68 68  |ocol........hhhh|
00000020  68 68 68 68 68 68 68 68  68 68 68 68 68 68 68 68  |hhhhhhhhhhhhhhhh|
00000030  2d 53 47 30 31 30 30 2d  70 70 70 70 70 70 70 70  |-SG0100-pppppppp|
00000040  70 70 70 70                                       |pppp|
00000044
```

where the info hash of the torrent in question is `hhhhhhhhhhhhhhhhhhhh` (aka `0x6868686868686868686868686868686868686868`) and our peer ID is `-SG0100-pppppppppppp` (aka `0x2d5347303130302d707070707070707070707070`).

\todo{use our real info hash in example?}

The relevant part of this handshake is the eight bytes after the string `BitTorrent protocol` that begins the handshake. These "reserved bytes" [@bep0003] are for extending the protocol. To understand how this works, let's zoom in on those 8 bytes:

```bitfield
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
```

In this representation, each line is one byte. As a byte is made up of 8 bits, which can either be 0 or 1 (false or true, off or on, etc.), this visualization shows the 8 bytes in the most detail possible.

\todo{"most detail" is not the right wording. most granularity? most precision?}

To indicate that a BitTorrent client supports a given extension, the client sets the corresponding bit to 1.

\todo{come up with example or reference real extension}

which would give us the following set of 8 bytes:

```bitfield
00000001
00000000
00000000
00000000
00000000
00000000
00000000
00000000
```

and if we return to our original visualization of the handshake:

```hexdump
00000000  13 42 69 74 54 6f 72 72  65 6e 74 20 70 72 6f 74  |.BitTorrent prot|
00000010  6f 63 6f 6c 01 00 00 00  00 00 00 00 68 68 68 68  |ocol........hhhh|
00000020  68 68 68 68 68 68 68 68  68 68 68 68 68 68 68 68  |hhhhhhhhhhhhhhhh|
00000030  2d 53 47 30 31 30 30 2d  70 70 70 70 70 70 70 70  |-SG0100-pppppppp|
00000040  70 70 70 70                                       |pppp|
00000044
```

\todo{color or highlight changed byte?}

Whenever the client connects to any peers, it would give this handshake instead, and if the peer it is connecting to has the same bit set in its handshake, then the clients can use whatever functionality this extension provides during their connection.

What's especially handy about this method of specifying extensions is that clients (such as mine) that don't support any extensions can simply *not read* the 8 extension bytes. In fact, my implementation literally skips over them and doesn't ever check their contents. And so long as I sent 8 zero bytes in my handshake, everything works nicely.

#### Two minor logistical challenges

Inherent to how extensions are specified, each extension must use a different bit to indicate that it is supported. Once an extension is published and widely supported, this is largely not a problem. However, it could be a problem during extension development.

There are also only 64 possible extensions, simply because 8 bytes is only 64 bits.

### Metainfo file extensions {#sec-extensions-metainfo-file}

Other extensions modify the metainfo file. Sometimes these extensions will modify keys within the info dictionary, which may cause incompatibilities with clients that do not support the extension.

### Extension protocol extensions

Some extensions use the extension protocol (described in @sec-extensions-extension-protocol) to avoid the complications of "true" peer wire extensions. Other than how they are defined and negotiated, these extensions largely behave similarly to peer wire extensions, changing how peers talk to each other.

### Other extensions

There are even more types of extensions beyond the above three. Most common are extensions that modify the behavior of trackers, but there other other extensions as well.

## List of extensions

\todo{I will expand further on any extension that I actually end up implementing. Otherwise, these are deliberately just overviews.

### DHT Protocol {#sec-extensions-dht}

Specified in @bep0005. both a peer wire and metainfo file extension

### Fast extension

Specified in @bep0006. peer wire extension.

### Magnet links {#sec-extensions-magnet-links}

Specified in @bep0009. extension protocol extension

### Extension protocol {#sec-extensions-extension-protocol}

The extension protocol [@bep0010] defines a better way for peers to negotiate extensions to the original BitTorrent protocol.

It is a peer wire extension, and its corresponding bit is the 21st bit from the right (`0x00 0x00 0x00 0x00 0x00 0x10 0x00 0x00`).

This extension defines one new peer wire message:

+----------------+--------+-------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| **Name**       | **ID** | **Payload**                                                 | **Description**                                                                            |
+================+========+=============================================================+============================================================================================+
| extended       | 20     | A single one-byte integer, `extended_id`, followed by       | This peer is sending an extended message with ID `extended_id`. The payload of this        |
|                |        | arbitrary data of an arbitrary length.                      | extended message is the arbitrary data at the end of the peer wire payload.                |
+----------------+--------+-------------------------------------------------------------+--------------------------------------------------------------------------------------------+

: Message types defined by the extension protocol {#tbl-extensions-extension-protocol-message-types}

The extension protocol itself defines only one message, with ID 0. This is the extension protocol handshake. Its payload is a bencoded dictionary with one required key and a series of optional keys:

`m`
:   The single required key. The value of this key is itself a dictionary mapping names of extensions to extended message IDs for the corresponding extension message.

    If a client sees an extension name that it does not recognize, it should ignore it. If a client sees an extension name that it does recognize with a value of 0, that means the peer does not support that extension. If a client sees an extension name that it recognizes with a non-zero value, that means the peer supports that extension, and wants the client to use the given value as the extended message ID for that extension when sending the extension message.

    Extended message IDs cannot appear more than once, and only apply to this specific connection with this specific peer (although the peer will almost definitely use the same IDs in future connections).

    Extension names should be prefixed with the same one or two-letter code that is used to identify the client that introduced the extension (that is, the letter(s) used in that client's peer ID format).

`p`
:   The local TCP port that this peer is listening on.

`v`
:   This peer's client name and version.

`yourip`
:   The IP address that this peer sees this client as.

`ipv6`
:   This peer's IPv6 address (if applicable).

`ipv4`
:   This peer's IPv4 address (if applicable).

`reqq`
:   The number of chunk requests this peer can be waiting for before it will start dropping some.

The extension protocol handshake should be the first message sent after the BitTorrent handshake to any peer that supports the extension protocol^[unclear how this interacts with bitfields having to be the first message].

### Peer Exchange (PEX)

Specified in @bep0011. extension protocol extension

### Multitracker Metadata Extension {#sec-extensions-multitracker}

\todo{hook,justification,explanation,etc.}

Specified in @bep0012. metainfo files extension.

This extension tells the client to ignore the `announce` key in the metainfo file and read a new `announce-list` key instead. This new key holds a list of lists of tracker URLs that will be used in place of the tracker URL in the `announce` key.

\todo{explain the tiers of trackers}

### Local Service Discovery

Specified in @bep0014. Other extension.

### UDP Tracker Protocol for BitTorrent

Specified in @bep0015. Other extension

### Superseeding

### HTTP Seeding (Hoffman-style) {#sec-extensions-http-hoffman}

Specified in @bep0017. metainfo files. 

### HTTP/FTP Seeding (GetRight-style) {#sec-extensions-http-getright}

Specified in @bep0019. metainfo files

### Tracker returns compact peer lists

Specified in @bep0023. other extension.

### Tracker Returns External IP

Specified in @bep0024. other extension

### Private Torrents {#sec-extensions-private-torrents}

Specified in @bep0027. metainfo files

### Canonical Peer Priority

Specified in @bep0040. Seems kinda silly to me.

### Tracker Protocol Extension: Scrape {#sec-extensions-tracker-scrape}

Specified in @bep0048. other extension
