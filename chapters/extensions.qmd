# BitTorrent Extensions {#sec-extensions}

## Types of extensions

### Peer wire protocol extensions {#sec-extensions-peer-wire-protocol}

Recall from @sec-peer-wire-protocol-handshake that once two peers connect, the first thing that they do is perform a *handshake*. The handshake that I used looks like this:

```hexdump
00000000  13 42 69 74 54 6f 72 72  65 6e 74 20 70 72 6f 74  |.BitTorrent prot|
00000010  6f 63 6f 6c 00 00 00 00  00 00 00 00 68 68 68 68  |ocol........hhhh|
00000020  68 68 68 68 68 68 68 68  68 68 68 68 68 68 68 68  |hhhhhhhhhhhhhhhh|
00000030  2d 53 47 30 31 30 30 2d  70 70 70 70 70 70 70 70  |-SG0100-pppppppp|
00000040  70 70 70 70                                       |pppp|
00000044
```

where the info hash of the torrent in question is `hhhhhhhhhhhhhhhhhhhh` (aka `0x6868686868686868686868686868686868686868`) and our peer ID is `-SG0100-pppppppppppp` (aka `0x2d5347303130302d707070707070707070707070`).

The relevant part of this handshake is the eight bytes after the string `BitTorrent protocol` that begins the handshake. These "reserved bytes" [@bep0003] are for extending the protocol. To understand how this works, let's zoom in on those 8 bytes:

```bitfield
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
```

In this representation, each line is one byte. As a byte is made up of 8 bits, which can either be 0 or 1 (false or true, off or on, etc.), this visualization shows the 8 bytes in the most granularity possible.

To indicate that a BitTorrent client supports a given extension, the client sets the corresponding bit to 1.

If there was a hypothetical extension which corresponded to the 8th bit, we would have the following set of 8 bytes when it and it alone was enabled:

```bitfield
00000001
00000000
00000000
00000000
00000000
00000000
00000000
00000000
```

and if we return to our original visualization of the handshake:

```hexdump
00000000  13 42 69 74 54 6f 72 72  65 6e 74 20 70 72 6f 74  |.BitTorrent prot|
00000010  6f 63 6f 6c 01 00 00 00  00 00 00 00 68 68 68 68  |ocol........hhhh|
00000020  68 68 68 68 68 68 68 68  68 68 68 68 68 68 68 68  |hhhhhhhhhhhhhhhh|
00000030  2d 53 47 30 31 30 30 2d  70 70 70 70 70 70 70 70  |-SG0100-pppppppp|
00000040  70 70 70 70                                       |pppp|
00000044
```

Whenever the client connects to any peers, it would give this handshake instead, and if the peer it is connecting to has the same bit set in its handshake, then the clients can use whatever functionality this extension provides during their connection.

What's especially handy about this method of specifying extensions is that clients (such as mine) that don't support any extensions can simply *not read* the 8 extension bytes. In fact, my implementation literally skips over them and doesn't ever check their contents. And so long as I sent 8 zero bytes in my handshake, everything works nicely.

#### Two minor logistical challenges

Inherent to how extensions are specified, each extension must use a different bit to indicate that it is supported. Once an extension is published and widely supported, this is largely not a problem. However, it could be a problem during extension development.

There are also only 64 possible extensions, simply because 8 bytes is only 64 bits.

### Metainfo file extensions {#sec-extensions-metainfo-file}

Other extensions modify the metainfo file. Sometimes these extensions will modify keys within the info dictionary, which may cause incompatibilities with clients that do not support the extension.

### Extension protocol extensions

Some extensions use the extension protocol (described in @sec-extensions-extension-protocol) to avoid the complications of "true" peer wire extensions. Other than how they are defined and negotiated, these extensions largely behave similarly to peer wire extensions, changing how peers talk to each other.

### Other extensions

There are even more types of extensions beyond the above three. Most common are extensions that modify the behavior of trackers, but there other other extensions as well.

## List of extensions

### DHT Protocol {#sec-extensions-dht}

This extension, specified in @bep0005, modifies both the peer wire protocol and the metainfo file. It supplements/replaces the use of centralized trackers with other nodes who can tell you how to find other nodes.

### Fast extension

This extension, specified in @bep0006, modifies the peer wire protocol. It provides some new message types that make the peer wire protocol more efficient.

### Magnet links {#sec-extensions-magnet-links}

This extension, specified in @bep0009, uses the extension protocol. It allows peers to fetch the metainfo file from each other based solely on the infohash, which also allows the use of *magnet links* (links that contain only the infohash) to download torrents.

### Extension protocol {#sec-extensions-extension-protocol}

The extension protocol [@bep0010] defines a better way for peers to negotiate extensions to the original BitTorrent protocol.

It is a peer wire extension, and its corresponding bit is the 21st bit from the right (`0x00 0x00 0x00 0x00 0x00 0x10 0x00 0x00`).

This extension defines one new peer wire message:

+----------------+--------+-------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| **Name**       | **ID** | **Payload**                                                 | **Description**                                                                            |
+================+========+=============================================================+============================================================================================+
| extended       | 20     | A single one-byte integer, `extended_id`, followed by       | This peer is sending an extended message with ID `extended_id`. The payload of this        |
|                |        | arbitrary data of an arbitrary length.                      | extended message is the arbitrary data at the end of the peer wire payload.                |
+----------------+--------+-------------------------------------------------------------+--------------------------------------------------------------------------------------------+

: Message types defined by the extension protocol {#tbl-extensions-extension-protocol-message-types}

The extension protocol itself defines only one message, with ID 0. This is the extension protocol handshake. Its payload is a bencoded dictionary with one required key and a series of optional keys:

`m`
:   The single required key. The value of this key is itself a dictionary mapping names of extensions to extended message IDs for the corresponding extension message.

    If a client sees an extension name that it does not recognize, it should ignore it. If a client sees an extension name that it does recognize with a value of 0, that means the peer does not support that extension. If a client sees an extension name that it recognizes with a non-zero value, that means the peer supports that extension, and wants the client to use the given value as the extended message ID for that extension when sending the extension message.

    Extended message IDs cannot appear more than once, and only apply to this specific connection with this specific peer (although the peer will almost definitely use the same IDs in future connections).

    Extension names should be prefixed with the same one or two-letter code that is used to identify the client that introduced the extension (that is, the letter(s) used in that client's peer ID format).

`p`
:   The local TCP port that this peer is listening on.

`v`
:   This peer's client name and version.

`yourip`
:   The IP address that this peer sees this client as.

`ipv6`
:   This peer's IPv6 address (if applicable).

`ipv4`
:   This peer's IPv4 address (if applicable).

`reqq`
:   The number of chunk requests this peer can be waiting for before it will start dropping some.

The extension protocol handshake should be the first message sent after the BitTorrent handshake to any peer that supports the extension protocol^[unclear how this interacts with bitfields having to be the first message].

### Peer Exchange (PEX)

This extension, specified in @bep0011, uses the extension protocol. It provides another way for peers to find each other without trackers.

### Multitracker Metadata Extension {#sec-extensions-multitracker}

This extension, specified in @bep0012, modifies the metainfo file. It tells the client to ignore the `announce` key in the metainfo file and read a new `announce-list` key instead. This new key holds a list of lists of tracker URLs that will be used in place of the tracker URL in the `announce` key.

### Local Service Discovery

This extension is specified in @bep0014. It provides another way for peers to find each other without trackers.

### UDP Tracker Protocol for BitTorrent

This extension is specified in @bep0015. It allows trackers to be contacted over UDP as well.

### Superseeding

This extension is specified in @bep0016. It defines a strategy for seeds to selectively inform other peers of which pieces they have in order to share rarer pieces first.

### HTTP Seeding (Hoffman-style) {#sec-extensions-http-hoffman}

This extention, specified in @bep0017, modifies the metainfo file. It allows treating direct download sites as a peer in the swarm.

### HTTP/FTP Seeding (GetRight-style) {#sec-extensions-http-getright}

This extention, specified in @bep0019, modifies the metainfo file. It allows treating direct download sites as a peer in the swarm.

### Tracker returns compact peer lists

This extension is specified in @bep0023. It modifies tracker responses to make them more compact and take less bandwidth.

### Tracker Returns External IP

This extension is specified in @bep0024. It modifies tracker responses to inform the client of its true external IP, after NAT layers.

### Private Torrents {#sec-extensions-private-torrents}

This extension, specified in @bep0027, modifies the metainfo file. It tells clients that a given torrent is "private" and should only be used with the listed tracker and no other methods for discovering peers.

<!-- ### Canonical Peer Priority -->
<!---->
<!-- Specified in @bep0040. Seems kinda silly to me. -->

### Tracker Protocol Extension: Scrape {#sec-extensions-tracker-scrape}

This extension is specified in @bep0048. It allows peers to get metadata about a swarm from the tracker.
