# Peer Wire Protocol {#sec-peer-wire-protocol}

Once the client is told where to find peers by the tracker (@sec-trackers), it connects to some number of those peers and initiates the peer wire protocol, through which it can download the file(s) that make up the torrent.

::: {#fig-peer-wire-protocol layout-ncol=3}

![We get our first piece](peer-wire-protocol-figure-1.tex){#fig-peer-wire-protocol-first-piece width=90%}

![We start sharing pieces](peer-wire-protocol-figure-2.tex){#fig-peer-wire-protocol-more-pieces width=90%}

![We complete the file](peer-wire-protocol-figure-3.tex){#fig-peer-wire-protocol-complete width=90%}

A typical BitTorrent download
:::

Let's reference @fig-peer-wire-protocol @fig-peer-wire-protocol-first-piece @fig-peer-wire-protocol-more-pieces @fig-peer-wire-protocol-complete

## What is the peer wire protocol?

Although the client now knows how to find and connect to other peers in the swarm for the torrent that it wants, peers still do not know how to understand each other.

The solution is the  peer wire protocol, which defines a series of messages that allow peers to tell each other what pieces of the file they have, whether they are interested in uploading or downloading, and to request and send parts of the file. Extensions to the protocol (@sec-extensions-peer-wire-protocol) define even more message types allowing for even more functionality.

Importantly, it is a bidirectional protocol, which means that the connecting and receiving ends of the connection are identical to the protocol; both can send any of the valid messages at any valid time. Specifically, this means that whether client A connected to client B or client B connected to client A, once the connection begins either side can request pieces from the other.

The peer wire protocol is built on top of TCP. Feel free to peruse @sec-networking-primer for more background, but the important information about TCP in this context is that it is a *reliable* protocol. A TCP connection guarantees that messages sent on top of it will be:

1. received
2. in-order
3. uncorrupted

These strengths mean that the peer wire protocol doesn't need to worry about messages being lost or corrupt.

## Beginning the peer wire protocol

A peer connection begins by creating a TCP connection (including the TCP handshake[^tcphandshake]). Immediately thereafter, the peer wire protocol handshake occurs over that TCP connection.

[^tcphandshake]: TCP connections begin with a handshake to ensure that both sides are "speaking the same language" and to initiate the reliable connection. See @sec-networking-primer for more information.

### Initiating the TCP connection {#sec-peer-wire-protocol-listening-socket}

There are two ways in which a peer wire protocol connection begins: outgoing connections to peers listed in the responses from the tracker, and incoming connections on the socket the client listens on.

Upon each tracker response, the client gets a list of peers and how to connect to them. It then takes some of the peers from the list and attempts to connect to them. Many of these connection attempts will fail, most likely due to firewalls beyond the peer's control, but those that succeed proceed to the next step (@sec-peer-wire-protocol-handshake).

If our client can connect to peers, then it stands to reason (because BitTorrent is bidirectional) that peers can connect to us. 
Indeed, this is the case. For each torrent that it is downloading, a client must be listening for incoming TCP connections on a port. It reports that port to the tracker that it contacts, which allows other peers to connect to it.

Although a client *can* listen on a different port for each torrent that it downloads, it does not need to do so. Instead, a client can listen on a single port across all the torrents it is downloading, and identify which torrent incoming connections are for based on the BitTorrent handshake that is read next (@sec-peer-wire-protocol-handshake).

Note also that in most cases, clients will be run behind a firewall, which blocks incoming connections before they even reach the computer the client is running on. While this doesn't break the protocol if a single peer is unreachable, if *all* peers were unreachable no connections could ever be made. Therefore, for the health of the swarm it is important that at least some peers not be behind a firewall (due to how BitTorrent works, so long as at least one peer is reachable, all peer will *eventually* get the entire file, as they "coordinate" via the one reachable node).

### The peer wire protocol handshake {#sec-peer-wire-protocol-handshake}

To begin a peer wire connection, both peers must send a *handshake*. This is a specific sequence of bytes that assure each peer that the other is using the same protocol, so that they can be confident that the messages they send will not be misinterpreted. The BitTorrent peer wire protocol handshake looks like this:

```hexdump
00000000  13 42 69 74 54 6f 72 72  65 6e 74 20 70 72 6f 74  |.BitTorrent prot|
00000010  6f 63 6f 6c 00 00 00 00  00 00 00 00 68 68 68 68  |ocol........hhhh|
00000020  68 68 68 68 68 68 68 68  68 68 68 68 68 68 68 68  |hhhhhhhhhhhhhhhh|
00000030  2d 53 47 30 31 30 30 2d  70 70 70 70 70 70 70 70  |-SG0100-pppppppp|
00000040  70 70 70 70                                       |pppp|
00000044
```

\todo{insert colored hexdump diagram here}
\todo{explain hexdump diagram format}

Let's break that down. The first byte is `0x13`, which corresponds to decimal 19. This specifies the length of the subsequent ASCII string representation of the protocol name in bytes, and indeed, if we read the next 19 bytes, they are the string `BitTorrent protocol` in ASCII. This allows other protocols to exist between peers, since they will be differentiable by name.

<!-- Following the protocol name are eight extension bytes. In my implementation, as in the original specification, these are all `0x00`. Extensions to the peer wire protocol (described in further BEPs) can be assigned one of these 64 bits, and setting a given bit indicates that the corresponding extension is supported by the peer. -->
Following the protocol name are eight extension bytes. In this example, as in the original specification, these are all `0x00`, indicating that no extensions are supported. @sec-extensions-peer-wire-protocol details how clients can indicate that they support given extensions.

The next 20 bytes are the infohash of the torrent. When you're making an outgoing connection, this is simple, because you find peers by torrent, so you use that torrent's info hash^[that is, the process goes: 1) you ask the tracker "give me peers for torrent X"; 2) the tracker says "here's peer A"; 3) you connect to peer A and use the infohash for torrent X in the handshake]. However, it's a little more complicated for incoming connections. While you could technically open a new listening socket for each torrent you are downloading and send the corresponding port with each tracker request, most clients instead use a single listening socket for all torrents, wait for the incoming connection to send the infohash that they want, check whether we're actually participating in that torrent, and respond with the same infohash if so. Note that this makes it even more important to send the info hash first when making an outgoing connection.

After the infohash is the peer ID, which uniquely identifies a torrent client over the course of a download.

Once both peers have sent and received the handshake, they must check that the values they received are what they expected, or else they must close the connection.

+-----------------+--------------------------------------------------------------------+-------------------------------------------------------------------------+
|                 | **Outgoing connections**                                           | **Incoming connections**                                                |
+=================+====================================================================+=========================================================================+
| protocol        | Must be `BitTorrent protocol`                                      | Must be `BitTorrent protocol`                                           |
+-----------------+--------------------------------------------------------------------+-------------------------------------------------------------------------+
| Extension bytes | No restriction                                                     | No restriction                                                          |
+-----------------+--------------------------------------------------------------------+-------------------------------------------------------------------------+
| Infohash        | Send the infohash that they used to get the peer from the tracker, | Recieve an infohash that corresponds to a torrent they are downloading, |
|                 | receive the same infohash back                                     | send the same infohash back                                             |
+-----------------+--------------------------------------------------------------------+-------------------------------------------------------------------------+
| Peer ID         | Receive the peer ID they got from the tracker (if present)         | No restriction                                                          |
+-----------------+--------------------------------------------------------------------+-------------------------------------------------------------------------+

: Handshake restrictions {#tbl-peer-wire-protocol-handshake-restrictions}

## Types of messages

Once handshakes have been exchanged, the rest of the connection is an unending stream of messages.

Each message is made up of a four-byte[^endianness] integer[^signedness] that indicates the length of the rest of the message, followed by a one-byte message type identifier, followed by the payload of the message.

[^endianness]: This integer, and all subsequent integers in the protocol, are encoded in "network order" (big-endian).
[^signedness]: It is not specified whether this or any following integers are signed or unsigned. I assumed that they were unsigned, since none of them needed to represent negative numbers, and this seemed to work for me. That said, I wouldn't hit any issues until I stored a number big enough that the most significant bit was used, since that is when signed and unsigned integers diverge (assuming two's complement notation, which is the most common format).

As a special case, when the length prefix is 0, the message is a keep-alive[^keepalive], does not have a type identifier or payload, and should be ignored.

[^keepalive]: A keep-alive is a message send over a connection solely to prevent that connection from being closed.

There are nine message types defined in @bep0003. Message types defined in extensions are deferred to @sec-extensions-peer-wire-protocol.

+--------+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| **ID** | **Payload**                                                       | **Description**                                                                            |
+========+===================================================================+============================================================================================+
| 0      | None                                                              | This peer is now choking us (see @sec-peer-wire-protocol-choking-and-interest).            |
+--------+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| 1      | None                                                              | This peer is no longer choking us. See @sec-peer-wire-protocol-choking-and-interest.       |
+--------+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| 2      | None                                                              | This peer is now interested in us. See @sec-peer-wire-protocol-choking-and-interest.       |
+--------+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| 3      | None                                                              | This peer is no longer interested in us. See @sec-peer-wire-protocol-choking-and-interest. |
+--------+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| 4      | A single four-byte integer, `index`.                              | This peer has acquired a new piece with index `index`.                                     |
+--------+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| 5      | A bitfield[^bitfield] with as many bits as there are pieces in the| This peer has all the pieces whose indices correspond to the set bits in the bitfield.     |
|        | torrent being downloaded, padded to the next byte boundary with   | This message is only allowed as the first message after the handshake.                     |
|        | zeros.                                                            |                                                                                            |
+--------+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| 6      | Three four-byte integers, `index`, `offset`, and `length`.        | This peer wants a chunk of the piece with index `index`. The chunk they are                |
|        |                                                                   | requesting is `length` bytes long and starts `offset` bytes into the piece.                |
+--------+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| 7      | Two four-byte integers, `index` and `offset`,                     | This peer has just sent us a chunk of the piece with index `index`, starting `offset`      |
|        | followed by arbitrary data of an arbitrary length.                | bytes into the piece. The arbitrary data at the end of the payload is the actual chunk     |
|        |                                                                   | of the piece.                                                                              |
|        |                                                                   |                                                                                            |
|        |                                                                   | This message is only sent in response to a `request` message that we sent to the peer.     |
+--------+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| 8      | Three four-byte integers, `index`, `offset`, and `length`.        | This peer is canceling a previous request that they sent us. The previous request had the  |
|        |                                                                   | same `index`, `offset`, and `length` values.                                               |
+--------+-------------------------------------------------------------------+--------------------------------------------------------------------------------------------+

: Message Types {#tbl-peer-wire-protocol-message-types}

[^bitfield]: A bitfield is a very dense data structure that represents a list of true/false values by encoding true values as `1`s and false values as `0`s. For example, the list of booleans `[true, true, false, true, false, false, false, false]` can be represented as the bitfield `0b11010000`.

## Implementing the peer wire protocol

Since the peer wire protocol is bidirectional, we want to be listening all the time, even when we are also sending messages. First, though, we must perform our handshakes.

### Handshakes

\todo{do I even want this? probably}

### Receiving messages

This is actually pretty simple. So long as the client is still participating in the swarm, we perform the following steps:

1. Read the message length prefix (a four-byte big-endian unsigned integer)
1. If the message length is 0, this is a keepalive; jump to the next iteration of the loop
1. Read (message length) more bytes
1. `switch` on the first byte of the remaining data
1. Based on the message type, parse the payload
1. Update flags/note request/save piece to disk

### Sending messages

All of the logic is in this part of the protcol

- deciding what messages to send
- storing and stiching pieces

\todo{Conveniently, I haven't implemented this yet, so I can't write about it yet}

> ### Storing and Stitching Pieces
> 
> By its inherent nature, a BitTorrent peer may get pieces of the file(s) that it is downloading out of order, and must take care to keep track of the order that they go in so that they can later be reconstructed. 

### Choking and interest {#sec-peer-wire-protocol-choking-and-interest}
