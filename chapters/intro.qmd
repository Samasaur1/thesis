# Introduction

My thesis is made up of two parts. The first is a specification-compliant implementation of the original version of BitTorrent, while the second is this document, which aims to explain the BitTorrent protocol while assuming as little prior knowledge as possible.

## What is BitTorrent?

BitTorrent is a protocol used to download files. It offers a couple advantages over traditional file downloading:

Resilience
:   People can still download the file that they want so long as every piece of the file exists somewhere in the network, even if no individual person has the entire file. In contrast, in traditional downloading, if the server that originally shared the file goes offline, nobody else can download the file.

Reduced load
:   In traditional downloading, every person who wants the file connects to the server originally sharing the file. In contrast, in BitTorrent, as the file is disseminated throughout the network, new downloaders will retrieve some pieces of the file from those who have already downloaded it and not from the original server.

Increased speed
:   In a similar vein to reduced load, BitTorrent can (under ideal situations) improve the speed of downloads. Downloaders can retrieve pieces of the file from other people who have downloaded the file, who may be faster than the original server.

## How does BitTorrent work?

Suppose Alice has a file that she would like to share (`sams-thesis.pdf`). She performs the following steps:

1. She begins by generating a *metainfo file* (`sams-thesis.pdf.torrent`), which describes the file she'd like to share (see @sec-metainfo-files).
1. Then she opens the metainfo file using her BitTorrent client[^client].
1. She shares the metainfo file over a side channel.
1. She waits for a downloader to connect.

[^client]: A "BitTorrent client" is a program that implements the BitTorrent protocol, allowing its users to download files. I use the terms "BitTorrent client" and "implementation of BitTorrent" interchangeably.

If Bob then wants to download Alice's file (`sams-thesis.pdf`), he performs the following steps:

1. He begins by acquiring[^getmetainfofiles] the metainfo file Alice generated (`sams-thesis.pdf.torrent`).
1. He opens it in his BitTorrent client.
1. Bob's client parses the metainfo file and connects to the *tracker* listed in the file (@fig-intro-bittorrent-process-overview-tracker).

    The tracker (described in detail in @sec-trackers) gives Bob's client a list of *peers*, other people in the network who are uploading and/or downloading the same file, and their IP addresses.
    (Since Bob is the first person to try to download `sams-thesis.pdf`, Alice is the only peer.)

1. Bob's client then connects to some of these peers (in this case, only to Alice) and begins the *peer wire protocol* with each of them (@fig-intro-bittorrent-process-overview-peers, see also @sec-peer-wire-protocol).

    The peer wire protocol defines how Bob's client can request and receive pieces of `sams-thesis.pdf` from Alice, which it does automatically.
    As Bob's client receives pieces of `sams-thesis.pdf`, it verifies that they are correct (uncorrupted and untampered-with) against information stored in `sams-thesis.pdf.torrent`[^verification], and once it has all the pieces of `sams-thesis.pdf`, it checks that the file as a whole is correct.

[^getmetainfofiles]: It doesn't matter how Bob gets the metainfo file. Theoretically, he could even download the metainfo file itself via BitTorrent, but then he'd need the meta-metainfo file (`sams-thesis.pdf.torrent.torrent`), *ad nauseum*. Much easier is to transfer it via email, or FTP, or web hosting, or some MegaShareUpload site, or AIM direct connect, or Dropbox, or a flash drive, etc.
[^verification]: The method for performing these checks is described in more detail in @sec-metainfo-files, but in short we check the hash of each piece against its hash stored in the `sams-thesis.pdf.torrent`. This allows us to verify each piece of the file without needing to store each piece in `sams-thesis.pdf.torrent` in its entirety --- in which case there'd be no need to use BitTorrent, since we'd have `sams-thesis.pdf` already!

Bob has now successfully downloaded a file using BitTorrent!

Crucially, at this point Alice and Bob are entirely equal in the eyes of BitTorrent. It doesn't matter that Alice was the one to originally share the file, and if Alice turned off her computer and Charlie wanted to download the file, he could get the entire file from Bob so long as Bob's computer remains online.

::: {#fig-intro-bittorrent-process-overview layout-ncol=2}

![We talk to the tracker to find peers](figures/intro-bittorrent-process-overview-tracker.tex){#fig-intro-bittorrent-process-overview-tracker}

![We talk to peers to get the actual file](figures/intro-bittorrent-process-overview-peers.tex){#fig-intro-bittorrent-process-overview-peers width=90%}

An overview of the BitTorrent process
:::

## What did I produce?

There are many existing implementations of BitTorrent, just as there are many explanations of how the protocol works. However, many existing implementations suffer from one or more of the following weaknesses:

- **Written in memory-unsafe languages like C/C++**. Both C and C++ are notorious for their propensity to harbor subtle memory safety bugs, which many modern languages like Swift prevent automatically.
- **Over two decades old**. Although there's nothing inherently wrong with old software, there have been numerous developments and extensions to the BitTorrent protocol over its lifetime. A fresh start allowed me to plan ahead for everything that I wanted to support.
- **Inconsistent support for extensions**. As a consequence of the above, many existing clients are missing support for some functionality.
- **Hidden unsafe behavior**. A (somewhat) recent bug in qBittorrent, a popular BitTorrent client, meant that it silently ignored an entire category of security errors.[^tlsintrackers] My implementation takes this as an inspiration and makes sure not to do similarly.

[^tlsintrackers]: For the curious, the issue was that qBittorrent ignored all SSL errors when connecting to trackers, which left it trivially vulnerable to man-in-the-middle attacks. This likely had no adverse effect besides wasting time and bandwidth.

That said, my implementation (at least within the scope of my thesis) is not meant to compete directly with existing BitTorrent clients. Instead, it's meant to be:

- fully compliant with the original specification
- well-architectured
- well-documented

Primarily, it is for learning purposes, both my own and for anyone reading the source code.

Likewise, most existing implementations assume a fair bit of background knowledge and/or gloss over parts of the protocol. Even @noauthor_bittorrent_2017, which goes into fairly high detail, assumes a fair level of familiarity with various aspects of computer science.

This document aims to explain BitTorrent while assuming as little background as possible. To that end, each chapter begins with a conceptual overview of the topic that should be approachable to everyone before delving into increasing levels of detail, culminating in implementation-level details that may not interest all audiences.

## The elephant in the room: piracy

If you've ever heard of BitTorrent before, your impression of it is probably that it is used solely for internet piracy. Although it is not the main argument of my thesis, I will make three claims: first, that BitTorrent has important use cases other than piracy; second, even if BitTorrent were only used for piracy, that piracy is not an unconditional evil; third, even if piracy were an unconditional evil, that the BitTorrent protocol would still be an impressive technological achievement that is worth discussing.

Recall the three main advantages of BitTorrent: resillience, reduced load, and increased speed. These strengths are not limited to piracy, but apply to any download. Recall the last time you downloaded something very popular: perhaps an update to a video game or something else immediately after release, or a newly-released music video, or something along those lines. It likely was noticeably slower than normal, or even entirely unavailable. This type of issue is essentially unavoidable in traditional downloading, despite innovations like CDNs[^cdns] and similar technologies. Furthermore, tools like CDNs can be very expensive, especially for very large files such as academic datasets, or for open-source projects such as Linux distributions with higher budget priorities.

[^cdns]: A *CDN*, or *Content Delivery Network*, replicates files on numerous computers around the world. Users downloading those files connect to the closest copy, reducing latency, increasing resilience, and distributing the load.

It should come as no surprise, then, that all of these listed cases (video game updates, music releases, datasets, Linux installers) have used BitTorrent for distribution, along with many others. In fact, my first two successful test downloads were a dataset and a Linux installer ISO.

Even if BitTorrent were used solely for piracy, that is not the irredeemable evil that companies attempt to portray it as.
The biggest justification for piracy is that companies are trying their hardest to prevent consumers from actually owning content at all. This is most prevalent with the ever-increasing push towards streaming services, be it the plethora of movie/TV streaming services, Kindle Unlimited for book "streaming," or Apple Music/Spotify/etc. for music streaming. There are numerous "streaming exclusives" that are only accessible on streaming, often only on a specific streaming service (movie/TV and book streaming services are the worse offenders of this crime). Even when there is an option to buy media, it frequently is limited to digital copies only, and no physical releases.

There's nothing wrong with digital copies of media in theory, but in practice there are a couple issues. First, when you buy a digital copy of something you rarely actually buy a copy. Instead, you buy a license to use the thing you bought, revocable at any time by the company you bought it from. There are countless cases of this happening to consumers, and there's nothing you can do about it. This is because (whether you buy a copy or buy a license), digital media is usually protected by *digital rights management*, or DRM. Media protected by DRM prevents you from using what you "buy" the way that you want it to. For example, it prevents you from taking an ebook you bought on one e-reader and reading it on an e-reader from a different company (see @fig-steal-this-comic).

![*Steal This Comic* [@munroe_steal_2008]](figures/steal_this_comic.png){#fig-steal-this-comic fig-scap='xkcd 488: *Steal This Comic*'}

Furthermore, some content isn't available legally at all, even with DRM. This includes media where the master copies were damaged, movies/tv shows where the license for given songs expired and the versions on streaming services were silently changed, as well as recent cases such as the original theatrical version of *Across the Spider-Verse* not being available at all. There are also more extreme cases where no versions of media are available at all, such as nearly every video game over a decade old, as well as movies/shows (especially exclusives) taken off streaming services that go nowhere [@gibson_wonderful_2024]. In many cases, piracy is preservation.

In general, history has shown that people want to do the "right" thing and get things legally...when it's reasonable to do so. We've seen this with the gradual transition from Napster to iTunes to Spotify, or with the abrupt stop of bootlegged copies of anime in the West when series were legitimately licensed. There was a period near the advent of streaming services (before the proliferation of streaming services[^socalledfreemarket]) where rates of piracy decreased drastically, but this trend is reversing and will likely continue to do so, especially as streaming services continue to crack down on "password sharing."

[^socalledfreemarket]: Defenders of streaming services often claim that this is "the free market at work," but this is a fundamental misunderstanding of the situation. Music streaming services are (mostly and for the purposes of this example) a free market, because the choice between Apple Music and Spotify is not based on their catalogs --- since they have the same songs --- but based on their user experience, price, etc. That is the free market at work. Choosing between streaming services where each one is a siloed collection of licensed media is not a free market, because they aren't directly competing due to the division of content. There is a free market at work here, but it is the competition between streaming services (convenient) and piracy (free). And it's really hard to beat free.

Even if BitTorrent were only used for piracy, and piracy was the worst crime one could commit, the BitTorrent protocol would still be an impressive technical achievement worth investigating. In addition to the principles of resilience, reduced load, and increased speed described above, BitTorrent makes impressive strides towards decentralization, making it easier for anyone to share files. Additionally, the protocol is fundamentally built on zero-trust principles: even in the presence of malicious actors, since the client verifies each part of the file, the worst case scenario is a waste of time and bandwidth.
